# Preface

This book is a proposal for an [Instruction Set Architecture (ISA)](https://en.wikipedia.org/wiki/Instruction_set_architecture) which is designed to run a single execution thread for both scalar and vector operations. The RISC++ Architecture (Reduced Instruction Set for C++) is designed to have a close semantic fit with high-level programming languages such as [C++](https://en.wikipedia.org/wiki/C%2B%2B). 

Basing the design on C++ also makes the ISA suitable for supporting a wide range of High Level Languages (HLL). At the time of this publication, the Intel® corporation is actively promoting the Data Parallel C++ language. I have not yet performed a detailed analysis of how well RISC++ supports the [Intel® oneAPI DPC++/C++ Compiler](https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/dpc-compiler.html). However, after a preliminary study I believe that there will be a natural fit between the two.

One of the goals of RISC++ is to simplify both hardware and software design. By designing the machine language instruction set with high-level languages in mind, the binary code generated will be more efficient in both memory space and execution time. The RISC++ instruction set often has a one to one correspondence to C++ operators, data types, and expressions.

It has taken me many years to come to the point of publishing this book. It began as a tiny project which has grown over the years because the industry has evolved and I was always trying to catch up. I had no deadlines, I am an obsessive perfectionist, and I do tend to procrastinate. So now that I am retired I finally have time get it done. 

I used to have great dreams of getting a patent, selling it to Intel®, IBM® or whoever might want to buy it, and live my life in luxury. But then I would have to keep it a secret and I couldn't get input from other people. So now I've decided that this copyrighted book will be enough proof that these are indeed my original ideas, and I can put the question of patents off for another day. If I can sell some copies and use this to educate others, then that is enough, for now.

The target audience of this book is people who are familiar with C++, assembler level programming, and binary machine code. It is also important to have some understanding of micro-processor design. As we go through the book I will try to explain new concepts as they come up. As we go, I will give a very brief summary of the history of micro-processors and the instruction sets that run on them. 

The bulk of information will be about the very large family of processors developed by many different manufacturers known as [X86](https://en.wikipedia.org/wiki/X86). Intel and AMD (Advanced Micro Devices) have been primarily responsible for designing X86 Instruction Set Architecture and its many extensions. We will review the history of this ISA over time to illustrate how RISC++ is simpler.

For those who are unfamiliar with microprocessors, and those who want a quick refresher, I highly recommend Jonathan Stokes’ book which can be purchased on Amazon: [Inside the Machine, An Illustrated Introduction to Microprocessors and Computer Architecture](https://www.amazon.com/Inside-Machine-Introduction-Microprocessors-Architecture/dp/1593276680). 

A good online overview is [Modern Microprocessors - A 90-Minute Guide](http://www.lighterra.com/papers/modernmicroprocessors/) by Jason Robert Carey Patterson. This covers a wide range of topics in a short amount of time. It is highly recommended.

At the time of the publication of this book, there is no hardware which implements the RISC++ Architecture. I claim the ideas in this book as my personal intellectual property. I ask that the copyright be honored and that I be given credit for any of the ideas that are original to me. I will also make every effort to credit the works of others. I want this document to be used for educational purposes and I want the ideas to be as wide spread as possible. 

I hope to stimulate discussion and get ideas for improving the design. Many of the ideas have come through my own study using internet resources. I will do my best to provide links where people can study these ideas on there own. I use Wikipedia extensively, but I caution that these articles cannot necessarily be considered authoritative, but only as a starting point for further study. After reading this book and following the links, may I suggest that you make a donation to Wikipedia for providing such a rich set of relevant online information.

I would welcome comments and suggestions from experts in various fields. I would greatly appreciate input from people who design compilers for various languages such as C++. I would also welcome comments from hardware designers, from operating system experts, and from people who design critical performance scientific software. I am not an expert in any of those fields, but I have spent a great deal of time studying various computer architectures both at the ISA level and the implementations in hardware. I have built on top of what others have done and tried to streamline and pick the best features.

After reading this book I would encourage people to:

1. Offer suggestions for improvement of the instruction set or the hardware.
2. Help develop an "official" standardized definition of the RISC++ ISA.
3. Work cooperatively to develop the following tools:
	a. A macro Assembler to generate RISC++ binary code.
	c. A C++ compiler which generates RISC++ Assembler code.
	d. A RISC++ emulator, with debug capability.
	e. A new C++ math library optimized for RISC++.
4. Develop Verilog code to implement the RISC++ hardware.

I would hope the software would be open source and used in the education community. In fact, I would even dare to presume that this book could be used in college courses. My goal is to make my money by selling the book. If anyone else can find a way to make money or educate students, then please do so.


